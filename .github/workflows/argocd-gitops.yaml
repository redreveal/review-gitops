name: Review-GitOps Manual Modifications

on:
  push:
    branches:
      - main

jobs:
  update-argocd:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Review-GitOps
      uses: actions/checkout@v2
      with:
        repository: redreveal/review-gitops
        token: ${{ secrets.TOKEN }}
        path: review-gitops

    - name: Determine Environment and Branch
      id: determine-env
      uses: actions/github-script@v5
      with:
        script: |
          const payload = context.payload;
          const repo = context.repo;
          let base, head;

          if (payload.pull_request) {
            base = payload.pull_request.base.sha;
            head = payload.pull_request.head.sha;
          } else {
            base = payload.before;
            head = payload.after;
          }

          const compare = await github.rest.repos.compareCommits({
            owner: repo.owner,
            repo: repo.repo,
            base: base,
            head: head
          });

          const regions_envs = [];
          console.log('Files changed:');
          compare.data.files.forEach(file => {
            console.log(file.filename);
            let region, env, branch;
            if (file.filename.startsWith('dev/us-east-1')) {
              region = 'us-east-1';
              env = 'dev';
              branch = 'develop';
            } else if (file.filename.startsWith('uat/eu-west-1')) {
              region = 'eu-west-1';
              env = 'uat';
              branch = 'staging';
            } else if (file.filename.startsWith('prod/us-east-1')) {
              region = 'us-east-1';
              env = 'prod';
              branch = 'production';
            } else if (file.filename.startsWith('prod/us-west-1')) {
              region = 'us-west-1';
              env = 'prod';
              branch = 'production';
            }
            if (region && env && branch) {
              regions_envs.push({region, env, branch});
            }
          });

          const fs = require('fs');
          fs.writeFileSync('regions_envs.json', JSON.stringify(regions_envs));
          core.setOutput('regions_envs', 'regions_envs.json');
          console.log(`Regions and Environments: ${JSON.stringify(regions_envs)}`);

    - name: Checkout and Update Terraform Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/red-terraform
        token: ${{ secrets.TOKEN }}
        path: terraform

    - name: Update Terraform Repo to Latest
      run: |
        cd terraform
        git fetch origin
        git checkout ${{ env.branch }}
        git pull origin ${{ env.branch }}

    - name: Extract MSA Numbers
      run: |
        grep 'module.MSA' terraform/main.tf | egrep -o '[0-9]+' | sort -u > msa_numbers.txt

    - name: Install yq and jq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        sudo apt-get install -y jq

    - name: Checkout ArgoCD-GitOps Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/argocd-gitops-versions
        token: ${{ secrets.TOKEN }}
        path: argocd-gitops

    - name: Ensure and Sync Versions Files in ArgoCD-GitOps
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')

          VERSIONS_DIR="argocd-gitops/review/${ENV}/${REGION}"
          VERSIONS_FILE="$VERSIONS_DIR/versions.yaml"

          echo "Ensuring versions.yaml exists in $VERSIONS_DIR"

          mkdir -p $VERSIONS_DIR

          if [ ! -f $VERSIONS_FILE ]; then
            echo "default_all: 2024.7.29" > $VERSIONS_FILE
          fi

          cp review-gitops/${ENV}/${REGION}/versions.yaml $VERSIONS_FILE
        done

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    - name: Run the Python script to generate values.yaml
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          python .github/actions/scripts/process_values.py review-gitops/${ENV}/${REGION}/versions.yaml argocd-gitops/review/${ENV}/${REGION}
        done

    - name: Commit and Push
      run: |
        cd argocd-gitops
        git config user.email "rberisha@revealdata.com"
        git config user.name "Redon Berisha"
        git add .
        git commit -m "Updated from Review-GitOps" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
