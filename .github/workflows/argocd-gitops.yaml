name: Review-GitOps Manual Modifications

on:
  push:
    branches:
      - main

jobs:
  update-argocd:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Review-GitOps
      uses: actions/checkout@v2

    - name: Determine Environment and Branch
      id: determine-env
      uses: actions/github-script@v5
      with:
        script: |
          const payload = context.payload;
          const repo = context.repo;
          let base, head;
          
          if (payload.pull_request) {
            base = payload.pull_request.base.sha;
            head = payload.pull_request.head.sha;
          } else {
            base = payload.before;
            head = payload.after;
          }
          
          const compare = await github.rest.repos.compareCommits({
            owner: repo.owner,
            repo: repo.repo,
            base: base,
            head: head
          });
          
          let region, env, branch;
          compare.data.files.forEach(file => {
            if (file.filename.startsWith('dev/us-east-1')) {
              region = 'us-east-1';
              env = 'dev';
              branch = 'develop';
            } else if (file.filename.startsWith('uat/eu-west-1')) {
              region = 'eu-west-1';
              env = 'uat';
              branch = 'staging';
            } else if (file.filename.startsWith('prod/us-east-1')) {
              region = 'us-east-1';
              env = 'prod';
              branch = 'production';
            } else if (file.filename.startsWith('prod/us-west-1')) {
              region = 'us-west-1';
              env = 'prod';
              branch = 'production';
            }
          });

          if (!region || !env || !branch) {
            throw new Error("No matching directory found in changed files.");
          }

          core.setOutput('region', region);
          core.setOutput('env', env);
          core.setOutput('branch', branch);
          console.log(`Region: ${region}, Environment: ${env}, Branch: ${branch}`);

    - name: Set Environment Variables
      run: |
        echo "Region: ${{ steps.determine-env.outputs.region }}"
        echo "Environment: ${{ steps.determine-env.outputs.env }}"
        echo "Branch: ${{ steps.determine-env.outputs.branch }}"
        echo "region=${{ steps.determine-env.outputs.region }}" >> $GITHUB_ENV
        echo "env=${{ steps.determine-env.outputs.env }}" >> $GITHUB_ENV
        echo "branch=${{ steps.determine-env.outputs.branch }}" >> $GITHUB_ENV

    - name: Checkout and Update Terraform Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/red-terraform
        token: ${{ secrets.TOKEN }}
        path: terraform

    - name: Update Terraform Repo to Latest
      run: |
        cd terraform
        git fetch origin
        git checkout ${{ env.branch }}
        git pull origin ${{ env.branch }}

    - name: Extract MSA Numbers
      run: |
        grep 'module.MSA' terraform/main.tf | egrep -o '[0-9]+' | sort -u > msa_numbers.txt

    - name: Install yq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq

    - name: Checkout ArgoCD-GitOps Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/argocd-gitops-versions
        token: ${{ secrets.TOKEN }}
        path: argocd-gitops

    - name: Create/Update YAML Files in ArgoCD-GitOps
      run: |
        MSAS=$(cat msa_numbers.txt)
        for MSA in $MSAS; do
          echo "Processing MSA $MSA"
          DIRECTORY="argocd-gitops/review/${{ env.env }}/${{ env.region }}"
          FILE="$DIRECTORY/$MSA.yaml"
          VERSIONS_FILE="review-gitops/review/${{ env.env }}/${{ env.region }}/versions.yaml"

          echo "Processing MSA $MSA in directory $DIRECTORY"
          echo "Checking for overrides in $VERSIONS_FILE"

          if [ -z "$DIRECTORY" ]; then
            echo "Error: DIRECTORY is not set"
            exit 1
          fi

          # Ensure the directory exists
          mkdir -p $DIRECTORY

          # Create a default versions.yaml if it doesn't exist
          if [ ! -f $VERSIONS_FILE ]; then
            mkdir -p $(dirname $VERSIONS_FILE)
            echo "default_all: 2024.7.29" > $VERSIONS_FILE
          fi

          # Check for MSA overrides in review-gitops
          OVERRIDES=$(yq e ".msas.$MSA" $VERSIONS_FILE)
          if [ "$OVERRIDES" != "null" ]; then
            echo "Overrides found for MSA $MSA: $OVERRIDES"
            OVERRIDES_FORMATTED=$(echo "$OVERRIDES" | sed 's/^/    /')
            echo -e "default_all: 2024.7.29\nmsas:\n  $MSA:\n$OVERRIDES_FORMATTED" > $FILE
          else
            echo "No overrides found for MSA $MSA, creating symlink to versions.yaml"
            ln -sf ../../versions.yaml $FILE
          fi
        done

    - name: Commit and Push
      run: |
        cd argocd-gitops
        git config user.email "rberisha@revealdata.com"
        git config user.name "Redon Berisha"
        git commit -m "Updated from Review-GitOps" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
