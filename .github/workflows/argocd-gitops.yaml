name: Review-GitOps Manual Modifications

on:
  push:
    branches:
      - main

jobs:
  update-argocd:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Review-GitOps
      uses: actions/checkout@v2
      with:
        repository: redreveal/review-gitops
        token: ${{ secrets.TOKEN }}
        path: review-gitops

    - name: Determine Environment and Branch
      id: determine-env
      uses: actions/github-script@v5
      with:
        script: |
          const payload = context.payload;
          const repo = context.repo;
          let base, head;

          if (payload.pull_request) {
            base = payload.pull_request.base.sha;
            head = payload.pull_request.head.sha;
          } else {
            base = payload.before;
            head = payload.after;
          }

          const compare = await github.rest.repos.compareCommits({
            owner: repo.owner,
            repo: repo.repo,
            base: base,
            head: head
          });

          const regions_envs = [];
          console.log('Files changed:');
          compare.data.files.forEach(file => {
            console.log(file.filename);
            let region, env, branch;
            if (file.filename.startsWith('dev/')) {
              env = 'dev';
              branch = 'develop';
              region = file.filename.split('/')[1];
            } else if (file.filename.startsWith('uat/')) {
              env = 'uat';
              branch = 'uat';
              region = file.filename.split('/')[1];
            } else if (file.filename.startsWith('prod/')) {
              env = 'prod';
              branch = 'production';
              region = file.filename.split('/')[1];
            }
            if (region && env && branch) {
              regions_envs.push({region, env, branch});
            }
          });

          const fs = require('fs');
          fs.writeFileSync('regions_envs.json', JSON.stringify(regions_envs));
          core.setOutput('regions_envs', 'regions_envs.json');
          console.log(`Regions and Environments: ${JSON.stringify(regions_envs)}`);

    - name: Checkout Terraform Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/red-terraform
        token: ${{ secrets.TOKEN }}
        path: terraform

    - name: Install yq and jq
      run: |
        sudo wget https://github.com/mikefarah/yq/releases/download/v4.6.1/yq_linux_amd64 -O /usr/bin/yq
        sudo chmod +x /usr/bin/yq
        sudo apt-get install -y jq

    - name: Extract MSA Numbers for Each Environment
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          BRANCH=$(_jq '.branch')

          echo "Checking out branch $BRANCH for $ENV/$REGION"
          cd terraform
          git fetch origin
          git checkout $BRANCH
          git pull origin $BRANCH

          if [[ "$ENV" == "dev" ]]; then
            MAIN_TF="dev/$REGION/99_clients/main.tf"
          elif [[ "$ENV" == "uat" ]]; then
            MAIN_TF="uat/$REGION/99_clients/main.tf"
          elif [[ "$ENV" == "prod" ]]; then
            MAIN_TF="prod/$REGION/99_clients/main.tf"
          fi

          echo "Extracting MSA numbers for $ENV/$REGION from $MAIN_TF"
          grep 'module.MSA' $MAIN_TF | egrep -o '[0-9]+' | sort -u > ../msa_numbers_${ENV}_${REGION}.txt
          cd ..
        done

    - name: Checkout ArgoCD-GitOps Repo
      uses: actions/checkout@v2
      with:
        repository: redreveal/argocd-gitops-versions
        token: ${{ secrets.TOKEN }}
        path: argocd-gitops

    - name: Ensure and Sync Versions Files in ArgoCD-GitOps
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')

          VERSIONS_DIR="argocd-gitops/review/${ENV}/${REGION}"
          VERSIONS_FILE="$VERSIONS_DIR/versions.yaml"

          echo "Ensuring versions.yaml exists in $VERSIONS_DIR"

          mkdir -p $VERSIONS_DIR

          if [ ! -f $VERSIONS_FILE ]; then
            echo "default_all: 2024.7.29" > $VERSIONS_FILE
          fi

          cp review-gitops/${ENV}/${REGION}/versions.yaml $VERSIONS_FILE
        done

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyyaml

    # DELETE AFTER FIGURING IT OUT
    - name: Output Before Running Script
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')

          FILE="msa_numbers_${ENV}_${REGION}.txt"

          echo "Before Processing MSA Numbers from $FILE:"
          if [ -f $FILE ]; then
            cat $FILE
          else
            echo "File $FILE does not exist."
          fi
        done

    - name: Run the Python script to generate values.yaml
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          python review-gitops/.github/actions/scripts/process_values.py review-gitops/${ENV}/${REGION}/versions.yaml argocd-gitops/review/${ENV}/${REGION}
        done

    # DELETE AFTER FIGURING IT OUT
    - name: Output After Running Script
      run: |
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')

          FILE="msa_numbers_${ENV}_${REGION}.txt"

          echo "Before Processing MSA Numbers from $FILE:"
          if [ -f $FILE ]; then
            cat $FILE
          else
            echo "File $FILE does not exist."
          fi
        done

#    - name: Handle Overrides and Symlinks
#      run: |
#        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
#        for region_env in $regions_envs; do
#          _jq() {
#            echo ${region_env} | base64 --decode | jq -r ${1}
#          }
#          REGION=$(_jq '.region')
#          ENV=$(_jq '.env')
#
#          MSAS=$(cat msa_numbers_${ENV}_${REGION}.txt | sort -u)
#          for MSA in $MSAS; do
#            DIRECTORY="argocd-gitops/review/${ENV}/${REGION}"
#            FILE="$DIRECTORY/$MSA.yaml"
#            VERSIONS_FILE="review-gitops/${ENV}/${REGION}/versions.yaml"
#
#            echo "Processing MSA $MSA in directory $DIRECTORY"
#            echo "Checking for overrides in $VERSIONS_FILE"
#
#            mkdir -p $DIRECTORY
#
#            OVERRIDES=$(yq e ".msas.\"$MSA\"" $VERSIONS_FILE)
#            echo "Command: yq e \".msas.\"$MSA\"\" $VERSIONS_FILE"
#            echo "Overrides for MSA $MSA: $OVERRIDES"
#            if [ "$OVERRIDES" != "null" ] && [ "$OVERRIDES" != "" ]; then
#              echo "Overrides found for MSA $MSA: $OVERRIDES"
#              OVERRIDES_FORMATTED=$(echo "$OVERRIDES" | sed 's/^/    /')
#
#              if [ -L $FILE ]; then
#                echo "Removing existing symlink $FILE"
#                rm $FILE
#              fi
#
#              echo -e "services:\n  search:\n    tag: $OVERRIDES" > $FILE
#            else
#              echo "No overrides found for MSA $MSA, ensuring symlink to default_values.yaml"
#              if [ ! -L $FILE ]; then
#                ln -sf ./default_values.yaml $FILE
#              fi
#            fi
#          done
#        done

    - name: Commit and Push
      run: |
        cd argocd-gitops
        git config user.email "rberisha@revealdata.com"
        git config user.name "Redon Berisha"
        git add .
        git commit -m "Updated from Review-GitOps" || echo "No changes to commit"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
