# .github/actions/push_values_to_argocd_gitops_repo/action.yml
name: Push Values to ArgoCD GitOps Repo
description: Handle MSA processing, run Python scripts, and verify Helm templates
inputs:
  env_type:
    description: 'Environment type (prod, dev, uat)'
    required: true
  github_token:
    description: 'GitHub token for pushing changes'
    required: true

runs:
  using: "composite"
  steps:
    - name: Generate regions_envs.json
      uses: actions/github-script@v5
      with:
        script: |
          const payload = context.payload;
          const repo = context.repo;
          let base, head;

          if (payload.pull_request) {
            base = payload.pull_request.base.sha;
            head = payload.pull_request.head.sha;
          } else {
            base = payload.before;
            head = payload.after;
          }

          const compare = await github.rest.repos.compareCommits({
            owner: repo.owner,
            repo: repo.repo,
            base: base,
            head: head,
          });

          const regions_envs = [];
          compare.data.files.forEach(file => {
            if (file.filename.startsWith('${{ inputs.env_type }}/')) {
              let env = `${{ inputs.env_type }}`;
              let region = file.filename.split('/')[1];
              regions_envs.push({ region, env, branch: env === 'prod' ? 'production' : env === 'dev' ? 'develop' : 'uat' });
            }
          });

          const fs = require('fs');
          fs.writeFileSync('review-gitops/regions_envs.json', JSON.stringify(regions_envs));
          console.log(`Regions and Environments for ${{ inputs.env_type }}: ${JSON.stringify(regions_envs)}`);

    - name: Extract MSA Numbers
      run: |
        set -e
        echo "Starting MSA extraction..."
        cd terraform
        regions_envs=$(cat ../review-gitops/regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          BRANCH=$(_jq '.branch')

          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            echo "Processing $ENV/$REGION"
            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            MAIN_TF="${ENV}/$REGION/99_clients/main.tf"
            echo "Extracting MSA numbers for $ENV/$REGION from $MAIN_TF"
            grep 'module.MSA' $MAIN_TF | egrep -o '[0-9]+' | sort -u > ../msa_numbers_${{ inputs.env_type }}_${REGION}.txt
          fi
        done
        echo "Finished MSA extraction."
      shell: bash

    - name: Remove Symlinks for Current Overrides
      run: |
        set -e
        echo "Starting to remove symlinks for current overrides..."
        cd argocd-gitops
        regions_envs=$(cat ../review-gitops/regions_envs.json | jq -r '.[] | @base64')

        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            # Check if 'msas' field exists and is not null before proceeding
            msas_exists=$(yq eval 'has("msas")' ../review-gitops/${ENV}/${REGION}/versions.yaml)

            if [[ "$msas_exists" == "false" ]]; then
              echo "No MSAs field found for $ENV/$REGION. Skipping symlink removal."
              continue
            fi

            # Fetch overridden MSAs if 'msas' field exists
            OVERRIDDEN_MSAS=$(yq eval '.msas | keys' ../review-gitops/${ENV}/${REGION}/versions.yaml | grep -o '[0-9]\+' || true)

            # If OVERRIDDEN_MSAS is empty, skip this region's symlink removal
            if [[ -z "$OVERRIDDEN_MSAS" ]]; then
              echo "No MSAs overridden for $ENV/$REGION. Skipping symlink removal."
              continue
            fi

            for MSA in $OVERRIDDEN_MSAS; do
              FILE="review/${ENV}/${REGION}/$MSA.yaml"
              if [ -L "$FILE" ]; then
                echo "Removing symlink for overridden MSA $MSA in $FILE"
                rm "$FILE"
              fi
            done
          fi
        done
        echo "Finished removing symlinks for current overrides."
      shell: bash

    - name: Run Python Script to Generate Values
      run: |
        set -e
        echo "Starting Python script to generate values..."
        cd review-gitops
        regions_envs=$(cat regions_envs.json | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            echo "Running Python script for $ENV/$REGION"
            python .github/actions/scripts/process_values.py ${ENV}/${REGION}/versions.yaml ../argocd-gitops/review/${ENV}/${REGION}
          fi
        done
        echo "Finished running Python script."
      shell: bash

    - name: Handle Symlinks for Overridden and Non-Overridden MSAs
      run: |
        set -e
        echo "Starting symlink handling after Python script..."
        cd argocd-gitops
        regions_envs=$(cat ../review-gitops/regions_envs.json | jq -r '.[] | @base64')
    
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
    
          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            ALL_MSAS=$(cat ../msa_numbers_${{ inputs.env_type }}_${REGION}.txt | sort -u)
            OVERRIDDEN_MSAS=$(yq eval '.msas | keys' ../review-gitops/${ENV}/${REGION}/versions.yaml | grep -o '[0-9]\+')
    
            for MSA in $ALL_MSAS; do
              FILE="review/${ENV}/${REGION}/$MSA.yaml"
              DEFAULT_VALUES_FILE="review/${ENV}/${REGION}/default_values.yaml"
    
              if echo "$OVERRIDDEN_MSAS" | grep -q "$MSA"; then
                if [ -L "$FILE" ]; then
                  echo "Removing symlink for newly overridden MSA $MSA in $FILE"
                  rm "$FILE"
                fi
              else
                if [ -f "$FILE" ] && [ ! -L "$FILE" ]; then
                  echo "Converting $FILE back to a symlink to default_values.yaml"
                  rm "$FILE"
                  ln -sf ./default_values.yaml "$FILE"
                elif [ ! -f "$FILE" ]; then
                  echo "Creating symlink for $MSA to default_values.yaml"
                  ln -sf ./default_values.yaml "$FILE"
                else
                  echo "Symlink for $MSA already exists or is not needed."
                fi
              fi
            done
          fi
        done
        echo "Finished symlink handling after Python script."
      shell: bash

    - name: Verify Helm Templates and Tags
      run: |
        set -e
    
        echo "Changing directory to argocd-gitops..."
        cd argocd-gitops
    
        echo "Running git diff to find modified files..."
        git diff --name-only | grep 'review/' > ../modified_files_raw.txt || true
    
        echo "Checking if any files were modified..."
        if [ ! -s ../modified_files_raw.txt ]; then
          echo "No modified files found matching 'review/'. Exiting."
          exit 0
        fi
    
        echo "Processing modified files..."
        sed "s|^|$(pwd)/|" ../modified_files_raw.txt > ../modified_files.txt
        cat ../modified_files.txt
    
        helm repo add redon-chart-repo https://redon-cdn.s3.amazonaws.com/
        helm repo update
    
        while IFS= read -r values_file; do
          echo "Processing $values_file"
          helm template redon-chart-repo/argopoc --values $values_file > rendered_template.yaml
    
          grep 'image:' rendered_template.yaml | while read -r line ; do
            repo=$(echo $line | awk -F: '{print $2}' | sed 's| //||g' | awk -F/ '{print $2}')
            tag=$(echo $line | awk -F: '{print $3}')
    
            if [ -z "$repo" ] || [ -z "$tag" ]; then
              echo "Failed to parse repo or tag from line: $line"
              exit 1
            fi
    
            echo "Checking tag $tag for repository $repo in file $values_file"
          done
        done < ../modified_files.txt
    
        echo "Finished Helm template and tag verification."
      shell: bash

    - name: Commit and Push Updates
      run: |
        set -e
        cd argocd-gitops
        git config user.email "rberisha@revealdata.com"
        git config user.name "Redon Berisha"
        git add .
        git commit -m "Updated from Review-GitOps" || echo "No changes to commit"
        git push
      shell: bash
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
