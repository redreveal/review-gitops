name: Process Values
description: Handle MSA processing, run Python scripts, and verify Helm templates
inputs:
  env_type:
    description: 'Environment type (prod, dev, uat)'
    required: true
  regions_envs_file:
    description: 'Path to the regions_envs.json file'
    required: true
  msa_numbers_prefix:
    description: 'Prefix for the msa_numbers file'
    required: true
  gitops_repo_path:
    description: 'Path to the GitOps repository'
    required: true
  terraform_repo_path:
    description: 'Path to the Terraform repository'
    required: true
  review_gitops_path:
    description: 'Path to the Review GitOps repository'
    required: true

runs:
  using: "composite"
  steps:
    - name: Extract MSA Numbers
      run: |
        regions_envs=$(cat ${{ inputs.regions_envs_file }} | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          BRANCH=$(_jq '.branch')

          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            echo "Checking out branch $BRANCH for $ENV/$REGION"
            cd ${{ inputs.terraform_repo_path }}
            git fetch origin
            git checkout $BRANCH
            git pull origin $BRANCH

            MAIN_TF="${ENV}/$REGION/99_clients/main.tf"
            echo "Extracting MSA numbers for $ENV/$REGION from $MAIN_TF"
            grep 'module.MSA' $MAIN_TF | egrep -o '[0-9]+' | sort -u > ../msa_numbers_${{ inputs.env_type }}_${REGION}.txt
            cd ..
          fi
        done
      shell: bash

    - name: Handle Symlinks for Overridden and Non-Overridden MSAs
      run: |
        regions_envs=$(cat ${{ inputs.regions_envs_file }} | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')

          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            ALL_MSAS=$(cat msa_numbers_${{ inputs.env_type }}_${REGION}.txt | sort -u)
            OVERRIDDEN_MSAS=$(yq eval '.msas | keys' ${{ inputs.review_gitops_path }}/${ENV}/${REGION}/versions.yaml | grep -o '[0-9]\+')

            for MSA in $ALL_MSAS; do
              FILE="${{ inputs.gitops_repo_path }}/review/${ENV}/${REGION}/$MSA.yaml"
              DEFAULT_VALUES_FILE="${{ inputs.gitops_repo_path }}/review/${ENV}/${REGION}/default_values.yaml"

              if echo "$OVERRIDDEN_MSAS" | grep -q "$MSA"; then
                if [ -L $FILE ]; then
                  echo "Removing symlink for overridden MSA $MSA in $FILE"
                  rm $FILE
                fi
              else
                if [ -f $FILE ] && [ ! -L $FILE ]; then
                  echo "Converting $FILE back to a symlink to default_values.yaml"
                  rm $FILE
                  ln -sf ./default_values.yaml $FILE
                fi
              fi
            done
          fi
        done
      shell: bash

    - name: Run Python Script to Generate Values
      run: |
        regions_envs=$(cat ${{ inputs.regions_envs_file }} | jq -r '.[] | @base64')
        for region_env in $regions_envs; do
          _jq() {
            echo ${region_env} | base64 --decode | jq -r ${1}
          }
          REGION=$(_jq '.region')
          ENV=$(_jq '.env')
          if [[ "$ENV" == "${{ inputs.env_type }}" ]]; then
            python ${{ inputs.review_gitops_path }}/.github/actions/scripts/process_values.py ${{ inputs.review_gitops_path }}/${ENV}/${REGION}/versions.yaml ${{ inputs.gitops_repo_path }}/review/${ENV}/${REGION}
          fi
        done
      shell: bash

    - name: Verify Helm Templates and Tags
      run: |
        cd ${{ inputs.gitops_repo_path }}
        git diff --name-only | grep 'review/' | sed "s|^|$(pwd)/|" > ../modified_files.txt
        cat ../modified_files.txt

        helm repo add redon-chart-repo https://redon-cdn.s3.amazonaws.com/
        helm repo update

        while IFS= read -r values_file; do
          echo "Processing $values_file"
          helm template redon-chart-repo/argopoc --values $values_file > rendered_template.yaml

          grep 'image:' rendered_template.yaml | while read -r line ; do
            repo=$(echo $line | awk -F: '{print $2}' | sed 's| //||g' | awk -F/ '{print $2}')
            tag=$(echo $line | awk -F: '{print $3}')

            if [ -z "$repo" ] || [ -z "$tag" ]; then
              echo "Failed to parse repo or tag from line: $line"
              exit 1
            fi

            echo "Checking tag $tag for repository $repo in file $values_file"
            #aws ecr describe-images --repository-name $repo --image-ids imageTag=$tag || exit 1
            echo "Tag $tag exists in ECR for repo $repo"
          done
        done < ../modified_files.txt
      shell: bash

    - name: Show Differences
      run: |
        cd ${{ inputs.gitops_repo_path }}
        git diff
      shell: bash

    - name: Commit and Push Updates
      run: |
        cd ${{ inputs.gitops_repo_path }}
        git config user.email "your_email@example.com"
        git config user.name "Your Name"
        git add .
        git commit -m "Updated from Review-GitOps" || echo "No changes to commit"
        git push
      shell: bash
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
